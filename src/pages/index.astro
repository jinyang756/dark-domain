---
// 暗域首页 最终版 V6.4 - 最终修正
const doorways = [
  { id: 1, name: '天道', href: '/core-theory', description: '宇宙观、炁、因果论' },
  { id: 2, name: '地道', href: '/case-studies', description: '现实规律、价值投资' },
  { id: 3, name: '人道', href: '/handbook', description: '内心修炼、自我之辨' },
];
---
<html lang="zh-CN">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>暗域 · Athen Drakmvese</title>
  
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;700&family=Inter:wght@300;400&display=swap" rel="stylesheet">
  
  <script is:inline>
    // is:inline 告诉Astro这是一段客户端脚本，并进行优化
    if (typeof window.tailwind !== 'undefined') {
      window.tailwind.config = {
        theme: {
          extend: {
            colors: {
              dark: '#0F1115',
            },
            fontFamily: {
              serif: ['"Noto Serif SC"', 'serif'],
              sans: ['Inter', 'sans-serif'],
            },
            animation: {
              'fade-in': 'fadeIn 1.5s ease-out forwards',
              'fade-in-down': 'fadeInDown 1.5s ease-out forwards',
            },
            keyframes: {
              fadeIn: { '0%': { opacity: '0' }, '100%': { opacity: '1' } },
              fadeInDown: { '0%': { opacity: '0', transform: 'translateY(-20px)' }, '100%': { opacity: '1', transform: 'translateY(0)' } }
            }
          },
        }
      };
    }
  </script>
  
  <style type="text/tailwindcss">
    @layer utilities {
      .text-shadow { text-shadow: 0 0 20px rgba(255, 255, 255, 0.5); }
      .glass-effect {
        backdrop-filter: blur(12px);
        -webkit-backdrop-filter: blur(12px);
        background-color: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.2);
      }
      .glass-hover { transition: all 0.3s ease; }
      .glass-hover:hover {
        background-color: rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.5);
        box-shadow: 0 0 25px rgba(255, 255, 255, 0.3);
        transform: translateY(-5px);
      }
    }
  </style>
</head>
<body class="bg-dark font-serif text-white min-h-screen overflow-hidden">
  <!-- 背景视频 -->
  <div class="fixed inset-0 z-[-2] overflow-hidden">
    <video autoplay loop muted playsinline id="bg-video" class="w-full h-full object-cover">
      <source src="https://assets.mixkit.co/videos/preview/mixkit-full-moon-shining-over-mountains-22776-large.mp4" type="video/mp4">
      您的浏览器不支持视频播放。
    </video>
  </div>
  
  <!-- 半透明遮罩 -->
  <div class="fixed inset-0 bg-black/40 z-[-1]"></div>
  
  <!-- 内容区域 -->
  <div class="min-h-screen flex flex-col items-center justify-between p-8 relative z-10">
    <!-- 头部 -->
    <header class="text-center animate-fade-in-down">
      <h1 class="text-[clamp(2.5rem,10vw,5rem)] font-serif font-normal tracking-[clamp(0.5em,2vw,1em)] ml-[clamp(0.5em,2vw,1em)] text-shadow opacity-90">暗域</h1>
      <p class="mt-4 text-[clamp(0.8rem,3vw,1.2rem)] font-sans text-gray-300 tracking-widest opacity-80">Athen Drakmvese</p>
    </header>
    
    <!-- 主要内容 -->
    <main class="w-full max-w-4xl flex flex-col items-center justify-center animate-fade-in" style="animation-delay: 0.3s;">
      <!-- **核心修正**：我们将交互逻辑移交给下面的脚本，而不是使用onclick -->
      <nav class="flex flex-col md:flex-row gap-6 md:gap-10">
        {doorways.map(door => (
          <a 
            href={door.href} 
            class="doorway-link glass-effect glass-hover rounded-xl py-5 px-8 text-center text-[clamp(1.2rem,4vw,1.8rem)] font-serif" 
            title={door.description} 
            data-voice-id={door.id}
          >
            {door.name}
          </a>
        ))}
      </nav>
    </main>
    
    <!-- 声音控制 -->
    <button id="sound-toggle" class="fixed bottom-6 right-6 w-12 h-12 rounded-full flex items-center justify-center bg-dark/30 hover:bg-dark/50 transition-all duration-300 opacity-70 hover:opacity-100 text-2xl" title="开启声音">
      <i class="fa fa-volume-off"></i>
    </button>
    
    <!-- 预加载的人声音频 -->
    <audio id="voice-1" preload="auto">
      <source src="https://assets.mixkit.co/sfx/preview/mixkit-voice-male-saying-stand-among-heaven-and-earth-2883.mp3" type="audio/mpeg">
    </audio>
    <audio id="voice-2" preload="auto">
      <source src="https://assets.mixkit.co/sfx/preview/mixkit-voice-male-saying-heaven-and-earth-2884.mp3" type="audio/mpeg">
    </audio>
    <audio id="voice-3" preload="auto">
      <source src="https://assets.mixkit.co/sfx/preview/mixkit-voice-male-saying-i-think-therefore-i-am-2885.mp3" type="audio/mpeg">
    </audio>
  </div>

  <script is:inline>
    // **核心修正**：将所有交互逻辑放在一个大的事件监听器中，这是Astro的最佳实践
    document.addEventListener('DOMContentLoaded', () => {
      const soundToggle = document.getElementById('sound-toggle');
      const video = document.getElementById('bg-video');
      const doorwayLinks = document.querySelectorAll('.doorway-link');

      // **播放语音提示的函数**
      function playVoice(id) {
        document.querySelectorAll('audio').forEach(audio => {
          audio.pause();
          audio.currentTime = 0;
        });
        
        const audio = document.getElementById(`voice-${id}`);
        if (audio instanceof HTMLAudioElement && video instanceof HTMLVideoElement && !video.muted) {
          audio.play().catch(e => console.error("Audio play failed:", e));
        }
      }

      // **为所有交互按钮绑定点击事件**
      doorwayLinks.forEach(link => {
        link.addEventListener('click', function(event) {
          const voiceId = this.getAttribute('data-voice-id');
          if (voiceId) {
            playVoice(parseInt(voiceId, 10));
          }
        });
      });

      // **声音控制**
      if (video instanceof HTMLVideoElement && soundToggle instanceof HTMLElement) {
        video.addEventListener('canplay', () => {
          soundToggle.style.display = 'flex';
        });
        
        soundToggle.addEventListener('click', () => {
          const isCurrentlyMuted = video.muted;
          video.muted = !isCurrentlyMuted;

          document.querySelectorAll('audio').forEach(audio => {
              if (audio instanceof HTMLAudioElement) {
                audio.muted = !isCurrentlyMuted;
              }
          });

          if (video.muted) {
            soundToggle.innerHTML = '<i class="fa fa-volume-off"></i>';
            soundToggle.title = '开启声音';
          } else {
            soundToggle.innerHTML = '<i class="fa fa-volume-up"></i>';
            soundToggle.title = '静音';
          }
        });
        
        // **视频片段循环逻辑**
        const startLoopTime = 3; 
        const endLoopTime = 15;
        
        video.addEventListener('timeupdate', () => {
          if (video.currentTime >= endLoopTime) {
            video.currentTime = startLoopTime;
            video.play();
          }
        });
        
        video.addEventListener('loadedmetadata', () => {
          video.currentTime = startLoopTime;
        });
      }
    });
  </script>
</body>
</html>
```